name: CI/CD
on:
  push:
    branches: 
    - main
    - develop
  pull_request:
    branches: 
    - main
    - develop
jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client-ui
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "14.x"
      - uses: actions/cache@v3 # this allows for re-using node_modules caching, making builds a bit faster.
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: NPM Install
        run: npm install
      - name: NPM Install Angular
        run: npm install -g @angular/cli > /dev/null
  
  continuous-deployment:

    name: Push Image to ECR
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client-ui
    steps:
    - name: Checkout 
      uses: actions/checkout@v2 
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: client-ui
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG